/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Item } from "./types/harmonized-viewer";
import { FormOrientationOption } from "./models/form-orientation";
export namespace Components {
    interface CustomVideo {
        "contentType": string;
        "url": string;
    }
    interface DigilabBanner {
    }
    interface DigilabLabel {
    }
    interface LacHarmonizedViewer {
        "appEnvironment": string;
        "contributionAlwaysOpen": boolean;
        "ecopy": string;
        "forceLanguage": string;
        "isUcc": boolean;
        "itemNumber": string;
        "kwicEcopies": string;
        "kwicPages": string;
        "layoutOption": string;
        "overrideUrl": string;
        "referenceSystem": string;
        "showLinkToRecord": boolean;
        "showUser": boolean;
        "suppressGallery": boolean;
    }
    interface UccBottom {
        "contributionDrawerForceOpen": boolean;
        "ecopy": string;
        "enabled": boolean;
        "fetched": boolean;
        "fetching": boolean;
        "haserror": boolean;
        "isDrawerOpen": boolean;
        "isFullscreen": boolean;
        "isUcc": boolean;
        "itemNumber": string;
        "items": any;
        "layoutOption": string;
        "manifestLoaded": boolean;
        "referenceSystem": string;
    }
    interface UccContribute {
        "isUcc": boolean;
        "itemNumber": string;
        "layoutOption": string;
        /**
          * STATE VARIABLES
         */
        "referenceSystem": string;
    }
    interface UccContributeCreate {
        "ecopy": string;
        "itemNumber": string;
        "referenceSystem": string;
    }
    interface UccContributeDescription {
        "language": string;
        "value": any;
    }
    interface UccContributeStatus {
        "editable": boolean;
        "name": string;
        "notApplicable": boolean;
        "value": string;
    }
    interface UccDownload {
        "ecopy": string;
        "itemNumber": string;
        "items": Item[];
        "language": string;
        "referenceSystem": string;
        "type": string;
        "url": string;
    }
    interface UccFormControl {
        "compact": boolean;
        "description": string;
        "label": string;
        "locked": boolean;
        "name": string;
        "orientation": FormOrientationOption;
    }
    interface UccGlobalTagging {
        "autocompleteDelay": number;
        "selectedTags": () => Promise<GlobalTag[]>;
        "setTags": (tags: GlobalTag[]) => Promise<any>;
        "value": GlobalTag[];
    }
    interface UccHelpToggle {
    }
    interface UccIndicator {
    }
    interface UccInput {
        "compact": boolean;
        "description": string;
        "editable": boolean;
        "height": string;
        "invalid": boolean;
        "label": string;
        "multiline": boolean;
        "name": string;
        "placeholder": string;
        "required": boolean;
        "type": string;
        "value": any;
        "vertical": boolean;
        "width": string;
    }
    interface UccLeft {
        "contributionDrawerForceOpen": boolean;
        "ecopy": string;
        "enabled": boolean;
        "fetched": boolean;
        "fetching": boolean;
        "haserror": boolean;
        "isDrawerOpen": boolean;
        "isFullscreen": boolean;
        "isUcc": boolean;
        "itemNumber": string;
        "items": any;
        "layoutOption": string;
        "manifestLoaded": boolean;
        "referenceSystem": string;
    }
    interface UccLocalTag {
    }
    interface UccMessage {
        "icon": string;
        "text": string;
        "type": MessageType;
        "visible": boolean;
    }
    interface UccNotification {
    }
    interface UccRight {
        "contributionDrawerForceOpen": boolean;
        "ecopy": string;
        "enabled": boolean;
        "fetched": boolean;
        "fetching": boolean;
        "haserror": boolean;
        "isDrawerOpen": boolean;
        "isFullscreen": boolean;
        "isUcc": boolean;
        "itemNumber": string;
        "items": any;
        "layoutOption": string;
        "manifestLoaded": boolean;
        "referenceSystem": string;
    }
    interface UccTab {
        "hidden": boolean;
        "iconName": string;
        "iconPrefix": string;
        "name": string;
        "text": string;
    }
    interface UccTabs {
        "cssClass": string;
    }
    interface UccTag {
        "changed": boolean;
        "tagId": number;
    }
    interface UccToolbar {
        "hideContributeButton": boolean;
        "isUcc": boolean;
        "itemNumber": string;
        "items": Item[];
        "language": string;
        "manifestLoaded": boolean;
        "referenceSystem": string;
    }
    interface UccTop {
        "contributionDrawerForceOpen": boolean;
        "ecopy": string;
        "enabled": boolean;
        "fetched": boolean;
        "fetching": boolean;
        "haserror": boolean;
        "isDrawerOpen": boolean;
        "isFullscreen": boolean;
        "isUcc": boolean;
        "itemNumber": string;
        "items": any;
        "manifestLoaded": boolean;
        "referenceSystem": string;
    }
    interface UccUserProfile {
    }
}
declare global {
    interface HTMLCustomVideoElement extends Components.CustomVideo, HTMLStencilElement {
    }
    var HTMLCustomVideoElement: {
        prototype: HTMLCustomVideoElement;
        new (): HTMLCustomVideoElement;
    };
    interface HTMLDigilabBannerElement extends Components.DigilabBanner, HTMLStencilElement {
    }
    var HTMLDigilabBannerElement: {
        prototype: HTMLDigilabBannerElement;
        new (): HTMLDigilabBannerElement;
    };
    interface HTMLDigilabLabelElement extends Components.DigilabLabel, HTMLStencilElement {
    }
    var HTMLDigilabLabelElement: {
        prototype: HTMLDigilabLabelElement;
        new (): HTMLDigilabLabelElement;
    };
    interface HTMLLacHarmonizedViewerElement extends Components.LacHarmonizedViewer, HTMLStencilElement {
    }
    var HTMLLacHarmonizedViewerElement: {
        prototype: HTMLLacHarmonizedViewerElement;
        new (): HTMLLacHarmonizedViewerElement;
    };
    interface HTMLUccBottomElement extends Components.UccBottom, HTMLStencilElement {
    }
    var HTMLUccBottomElement: {
        prototype: HTMLUccBottomElement;
        new (): HTMLUccBottomElement;
    };
    interface HTMLUccContributeElement extends Components.UccContribute, HTMLStencilElement {
    }
    var HTMLUccContributeElement: {
        prototype: HTMLUccContributeElement;
        new (): HTMLUccContributeElement;
    };
    interface HTMLUccContributeCreateElement extends Components.UccContributeCreate, HTMLStencilElement {
    }
    var HTMLUccContributeCreateElement: {
        prototype: HTMLUccContributeCreateElement;
        new (): HTMLUccContributeCreateElement;
    };
    interface HTMLUccContributeDescriptionElement extends Components.UccContributeDescription, HTMLStencilElement {
    }
    var HTMLUccContributeDescriptionElement: {
        prototype: HTMLUccContributeDescriptionElement;
        new (): HTMLUccContributeDescriptionElement;
    };
    interface HTMLUccContributeStatusElement extends Components.UccContributeStatus, HTMLStencilElement {
    }
    var HTMLUccContributeStatusElement: {
        prototype: HTMLUccContributeStatusElement;
        new (): HTMLUccContributeStatusElement;
    };
    interface HTMLUccDownloadElement extends Components.UccDownload, HTMLStencilElement {
    }
    var HTMLUccDownloadElement: {
        prototype: HTMLUccDownloadElement;
        new (): HTMLUccDownloadElement;
    };
    interface HTMLUccFormControlElement extends Components.UccFormControl, HTMLStencilElement {
    }
    var HTMLUccFormControlElement: {
        prototype: HTMLUccFormControlElement;
        new (): HTMLUccFormControlElement;
    };
    interface HTMLUccGlobalTaggingElement extends Components.UccGlobalTagging, HTMLStencilElement {
    }
    var HTMLUccGlobalTaggingElement: {
        prototype: HTMLUccGlobalTaggingElement;
        new (): HTMLUccGlobalTaggingElement;
    };
    interface HTMLUccHelpToggleElement extends Components.UccHelpToggle, HTMLStencilElement {
    }
    var HTMLUccHelpToggleElement: {
        prototype: HTMLUccHelpToggleElement;
        new (): HTMLUccHelpToggleElement;
    };
    interface HTMLUccIndicatorElement extends Components.UccIndicator, HTMLStencilElement {
    }
    var HTMLUccIndicatorElement: {
        prototype: HTMLUccIndicatorElement;
        new (): HTMLUccIndicatorElement;
    };
    interface HTMLUccInputElement extends Components.UccInput, HTMLStencilElement {
    }
    var HTMLUccInputElement: {
        prototype: HTMLUccInputElement;
        new (): HTMLUccInputElement;
    };
    interface HTMLUccLeftElement extends Components.UccLeft, HTMLStencilElement {
    }
    var HTMLUccLeftElement: {
        prototype: HTMLUccLeftElement;
        new (): HTMLUccLeftElement;
    };
    interface HTMLUccLocalTagElement extends Components.UccLocalTag, HTMLStencilElement {
    }
    var HTMLUccLocalTagElement: {
        prototype: HTMLUccLocalTagElement;
        new (): HTMLUccLocalTagElement;
    };
    interface HTMLUccMessageElement extends Components.UccMessage, HTMLStencilElement {
    }
    var HTMLUccMessageElement: {
        prototype: HTMLUccMessageElement;
        new (): HTMLUccMessageElement;
    };
    interface HTMLUccNotificationElement extends Components.UccNotification, HTMLStencilElement {
    }
    var HTMLUccNotificationElement: {
        prototype: HTMLUccNotificationElement;
        new (): HTMLUccNotificationElement;
    };
    interface HTMLUccRightElement extends Components.UccRight, HTMLStencilElement {
    }
    var HTMLUccRightElement: {
        prototype: HTMLUccRightElement;
        new (): HTMLUccRightElement;
    };
    interface HTMLUccTabElement extends Components.UccTab, HTMLStencilElement {
    }
    var HTMLUccTabElement: {
        prototype: HTMLUccTabElement;
        new (): HTMLUccTabElement;
    };
    interface HTMLUccTabsElement extends Components.UccTabs, HTMLStencilElement {
    }
    var HTMLUccTabsElement: {
        prototype: HTMLUccTabsElement;
        new (): HTMLUccTabsElement;
    };
    interface HTMLUccTagElement extends Components.UccTag, HTMLStencilElement {
    }
    var HTMLUccTagElement: {
        prototype: HTMLUccTagElement;
        new (): HTMLUccTagElement;
    };
    interface HTMLUccToolbarElement extends Components.UccToolbar, HTMLStencilElement {
    }
    var HTMLUccToolbarElement: {
        prototype: HTMLUccToolbarElement;
        new (): HTMLUccToolbarElement;
    };
    interface HTMLUccTopElement extends Components.UccTop, HTMLStencilElement {
    }
    var HTMLUccTopElement: {
        prototype: HTMLUccTopElement;
        new (): HTMLUccTopElement;
    };
    interface HTMLUccUserProfileElement extends Components.UccUserProfile, HTMLStencilElement {
    }
    var HTMLUccUserProfileElement: {
        prototype: HTMLUccUserProfileElement;
        new (): HTMLUccUserProfileElement;
    };
    interface HTMLElementTagNameMap {
        "custom-video": HTMLCustomVideoElement;
        "digilab-banner": HTMLDigilabBannerElement;
        "digilab-label": HTMLDigilabLabelElement;
        "lac-harmonized-viewer": HTMLLacHarmonizedViewerElement;
        "ucc-bottom": HTMLUccBottomElement;
        "ucc-contribute": HTMLUccContributeElement;
        "ucc-contribute-create": HTMLUccContributeCreateElement;
        "ucc-contribute-description": HTMLUccContributeDescriptionElement;
        "ucc-contribute-status": HTMLUccContributeStatusElement;
        "ucc-download": HTMLUccDownloadElement;
        "ucc-form-control": HTMLUccFormControlElement;
        "ucc-global-tagging": HTMLUccGlobalTaggingElement;
        "ucc-help-toggle": HTMLUccHelpToggleElement;
        "ucc-indicator": HTMLUccIndicatorElement;
        "ucc-input": HTMLUccInputElement;
        "ucc-left": HTMLUccLeftElement;
        "ucc-local-tag": HTMLUccLocalTagElement;
        "ucc-message": HTMLUccMessageElement;
        "ucc-notification": HTMLUccNotificationElement;
        "ucc-right": HTMLUccRightElement;
        "ucc-tab": HTMLUccTabElement;
        "ucc-tabs": HTMLUccTabsElement;
        "ucc-tag": HTMLUccTagElement;
        "ucc-toolbar": HTMLUccToolbarElement;
        "ucc-top": HTMLUccTopElement;
        "ucc-user-profile": HTMLUccUserProfileElement;
    }
}
declare namespace LocalJSX {
    interface CustomVideo {
        "contentType"?: string;
        "url"?: string;
    }
    interface DigilabBanner {
    }
    interface DigilabLabel {
    }
    interface LacHarmonizedViewer {
        "appEnvironment"?: string;
        "contributionAlwaysOpen"?: boolean;
        "ecopy"?: string;
        "forceLanguage"?: string;
        "isUcc"?: boolean;
        "itemNumber"?: string;
        "kwicEcopies"?: string;
        "kwicPages"?: string;
        "layoutOption"?: string;
        "overrideUrl"?: string;
        "referenceSystem"?: string;
        "showLinkToRecord"?: boolean;
        "showUser"?: boolean;
        "suppressGallery"?: boolean;
    }
    interface UccBottom {
        "contributionDrawerForceOpen"?: boolean;
        "ecopy"?: string;
        "enabled"?: boolean;
        "fetched"?: boolean;
        "fetching"?: boolean;
        "haserror"?: boolean;
        "isDrawerOpen"?: boolean;
        "isFullscreen"?: boolean;
        "isUcc"?: boolean;
        "itemNumber"?: string;
        "items"?: any;
        "layoutOption"?: string;
        "manifestLoaded"?: boolean;
        "referenceSystem"?: string;
    }
    interface UccContribute {
        "isUcc"?: boolean;
        "itemNumber"?: string;
        "layoutOption"?: string;
        "onItemUpdated"?: (event: CustomEvent<any>) => void;
        "onLacModUccContributeTutorialReady"?: (event: CustomEvent<any>) => void;
        /**
          * STATE VARIABLES
         */
        "referenceSystem"?: string;
    }
    interface UccContributeCreate {
        "ecopy"?: string;
        "itemNumber"?: string;
        "referenceSystem"?: string;
    }
    interface UccContributeDescription {
        "language"?: string;
        "value"?: any;
    }
    interface UccContributeStatus {
        "editable"?: boolean;
        "name"?: string;
        "notApplicable"?: boolean;
        "value"?: string;
    }
    interface UccDownload {
        "ecopy"?: string;
        "itemNumber"?: string;
        "items"?: Item[];
        "language"?: string;
        "referenceSystem"?: string;
        "type"?: string;
        "url"?: string;
    }
    interface UccFormControl {
        "compact"?: boolean;
        "description"?: string;
        "label"?: string;
        "locked"?: boolean;
        "name"?: string;
        "orientation"?: FormOrientationOption;
    }
    interface UccGlobalTagging {
        "autocompleteDelay"?: number;
        "value"?: GlobalTag[];
    }
    interface UccHelpToggle {
    }
    interface UccIndicator {
    }
    interface UccInput {
        "compact"?: boolean;
        "description"?: string;
        "editable"?: boolean;
        "height"?: string;
        "invalid"?: boolean;
        "label"?: string;
        "multiline"?: boolean;
        "name"?: string;
        "placeholder"?: string;
        "required"?: boolean;
        "type"?: string;
        "value"?: any;
        "vertical"?: boolean;
        "width"?: string;
    }
    interface UccLeft {
        "contributionDrawerForceOpen"?: boolean;
        "ecopy"?: string;
        "enabled"?: boolean;
        "fetched"?: boolean;
        "fetching"?: boolean;
        "haserror"?: boolean;
        "isDrawerOpen"?: boolean;
        "isFullscreen"?: boolean;
        "isUcc"?: boolean;
        "itemNumber"?: string;
        "items"?: any;
        "layoutOption"?: string;
        "manifestLoaded"?: boolean;
        "referenceSystem"?: string;
    }
    interface UccLocalTag {
    }
    interface UccMessage {
        "icon"?: string;
        "text"?: string;
        "type"?: MessageType;
        "visible"?: boolean;
    }
    interface UccNotification {
    }
    interface UccRight {
        "contributionDrawerForceOpen"?: boolean;
        "ecopy"?: string;
        "enabled"?: boolean;
        "fetched"?: boolean;
        "fetching"?: boolean;
        "haserror"?: boolean;
        "isDrawerOpen"?: boolean;
        "isFullscreen"?: boolean;
        "isUcc"?: boolean;
        "itemNumber"?: string;
        "items"?: any;
        "layoutOption"?: string;
        "manifestLoaded"?: boolean;
        "referenceSystem"?: string;
    }
    interface UccTab {
        "hidden"?: boolean;
        "iconName"?: string;
        "iconPrefix"?: string;
        "name"?: string;
        "text"?: string;
    }
    interface UccTabs {
        "cssClass"?: string;
    }
    interface UccTag {
        "changed"?: boolean;
        "onDelete"?: (event: CustomEvent<any>) => void;
        "tagId"?: number;
    }
    interface UccToolbar {
        "hideContributeButton"?: boolean;
        "isUcc"?: boolean;
        "itemNumber"?: string;
        "items"?: Item[];
        "language"?: string;
        "manifestLoaded"?: boolean;
        "on_lacModFullscreenToggle"?: (event: CustomEvent<any>) => void;
        "referenceSystem"?: string;
    }
    interface UccTop {
        "contributionDrawerForceOpen"?: boolean;
        "ecopy"?: string;
        "enabled"?: boolean;
        "fetched"?: boolean;
        "fetching"?: boolean;
        "haserror"?: boolean;
        "isDrawerOpen"?: boolean;
        "isFullscreen"?: boolean;
        "isUcc"?: boolean;
        "itemNumber"?: string;
        "items"?: any;
        "manifestLoaded"?: boolean;
        "referenceSystem"?: string;
    }
    interface UccUserProfile {
    }
    interface IntrinsicElements {
        "custom-video": CustomVideo;
        "digilab-banner": DigilabBanner;
        "digilab-label": DigilabLabel;
        "lac-harmonized-viewer": LacHarmonizedViewer;
        "ucc-bottom": UccBottom;
        "ucc-contribute": UccContribute;
        "ucc-contribute-create": UccContributeCreate;
        "ucc-contribute-description": UccContributeDescription;
        "ucc-contribute-status": UccContributeStatus;
        "ucc-download": UccDownload;
        "ucc-form-control": UccFormControl;
        "ucc-global-tagging": UccGlobalTagging;
        "ucc-help-toggle": UccHelpToggle;
        "ucc-indicator": UccIndicator;
        "ucc-input": UccInput;
        "ucc-left": UccLeft;
        "ucc-local-tag": UccLocalTag;
        "ucc-message": UccMessage;
        "ucc-notification": UccNotification;
        "ucc-right": UccRight;
        "ucc-tab": UccTab;
        "ucc-tabs": UccTabs;
        "ucc-tag": UccTag;
        "ucc-toolbar": UccToolbar;
        "ucc-top": UccTop;
        "ucc-user-profile": UccUserProfile;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "custom-video": LocalJSX.CustomVideo & JSXBase.HTMLAttributes<HTMLCustomVideoElement>;
            "digilab-banner": LocalJSX.DigilabBanner & JSXBase.HTMLAttributes<HTMLDigilabBannerElement>;
            "digilab-label": LocalJSX.DigilabLabel & JSXBase.HTMLAttributes<HTMLDigilabLabelElement>;
            "lac-harmonized-viewer": LocalJSX.LacHarmonizedViewer & JSXBase.HTMLAttributes<HTMLLacHarmonizedViewerElement>;
            "ucc-bottom": LocalJSX.UccBottom & JSXBase.HTMLAttributes<HTMLUccBottomElement>;
            "ucc-contribute": LocalJSX.UccContribute & JSXBase.HTMLAttributes<HTMLUccContributeElement>;
            "ucc-contribute-create": LocalJSX.UccContributeCreate & JSXBase.HTMLAttributes<HTMLUccContributeCreateElement>;
            "ucc-contribute-description": LocalJSX.UccContributeDescription & JSXBase.HTMLAttributes<HTMLUccContributeDescriptionElement>;
            "ucc-contribute-status": LocalJSX.UccContributeStatus & JSXBase.HTMLAttributes<HTMLUccContributeStatusElement>;
            "ucc-download": LocalJSX.UccDownload & JSXBase.HTMLAttributes<HTMLUccDownloadElement>;
            "ucc-form-control": LocalJSX.UccFormControl & JSXBase.HTMLAttributes<HTMLUccFormControlElement>;
            "ucc-global-tagging": LocalJSX.UccGlobalTagging & JSXBase.HTMLAttributes<HTMLUccGlobalTaggingElement>;
            "ucc-help-toggle": LocalJSX.UccHelpToggle & JSXBase.HTMLAttributes<HTMLUccHelpToggleElement>;
            "ucc-indicator": LocalJSX.UccIndicator & JSXBase.HTMLAttributes<HTMLUccIndicatorElement>;
            "ucc-input": LocalJSX.UccInput & JSXBase.HTMLAttributes<HTMLUccInputElement>;
            "ucc-left": LocalJSX.UccLeft & JSXBase.HTMLAttributes<HTMLUccLeftElement>;
            "ucc-local-tag": LocalJSX.UccLocalTag & JSXBase.HTMLAttributes<HTMLUccLocalTagElement>;
            "ucc-message": LocalJSX.UccMessage & JSXBase.HTMLAttributes<HTMLUccMessageElement>;
            "ucc-notification": LocalJSX.UccNotification & JSXBase.HTMLAttributes<HTMLUccNotificationElement>;
            "ucc-right": LocalJSX.UccRight & JSXBase.HTMLAttributes<HTMLUccRightElement>;
            "ucc-tab": LocalJSX.UccTab & JSXBase.HTMLAttributes<HTMLUccTabElement>;
            "ucc-tabs": LocalJSX.UccTabs & JSXBase.HTMLAttributes<HTMLUccTabsElement>;
            "ucc-tag": LocalJSX.UccTag & JSXBase.HTMLAttributes<HTMLUccTagElement>;
            "ucc-toolbar": LocalJSX.UccToolbar & JSXBase.HTMLAttributes<HTMLUccToolbarElement>;
            "ucc-top": LocalJSX.UccTop & JSXBase.HTMLAttributes<HTMLUccTopElement>;
            "ucc-user-profile": LocalJSX.UccUserProfile & JSXBase.HTMLAttributes<HTMLUccUserProfileElement>;
        }
    }
}
